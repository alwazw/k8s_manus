---
# Source: k8s-manus/templates/namespace/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: k8s-manus
  labels:
    name: k8s-manus
    app.kubernetes.io/name: k8s-manus
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/version: 1.0.0
    app.kubernetes.io/managed-by: Helm
  annotations:
    description: "K8s Manus - Comprehensive container stack with SSO"
---
# Source: k8s-manus/templates/storage/secrets.yaml
# Database Secrets
apiVersion: v1
kind: Secret
metadata:
  name: database-secrets
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: k8s-manus
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
type: Opaque
data:
  postgres-password: V2FmaWNXYXp6YW4hMg==
  postgres-username: YXV0aGVudGlr
  postgres-database: YXV0aGVudGlr
  mysql-root-password: V2FmaWNXYXp6YW4hMg==
  mysql-password: V2FmaWNXYXp6YW4hMg==
  mysql-username: Z3JhZmFuYQ==
  mysql-database: Z3JhZmFuYQ==
  redis-password: V2FmaWNXYXp6YW4hMg==
---
# Source: k8s-manus/templates/storage/secrets.yaml
# Application Secrets
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: k8s-manus
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
type: Opaque
data:
  admin-username: YWx3YXp3
  admin-password: V2FmaWNXYXp6YW4hMg==
  admin-email: d2FmaWNAd2F6emFuLnVz
---
# Source: k8s-manus/templates/storage/secrets.yaml
# Authentik Secrets
apiVersion: v1
kind: Secret
metadata:
  name: authentik-secrets
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: authentication
type: Opaque
data:
  secret-key: dGhpcy1pcy1hLXZlcnktc2VjdXJlLXNlY3JldC1rZXktY2hhbmdlLWluLXByb2R1Y3Rpb24=
---
# Source: k8s-manus/templates/storage/secrets.yaml
# Grafana OAuth Secrets
apiVersion: v1
kind: Secret
metadata:
  name: grafana-oauth-secrets
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
type: Opaque
data:
  client-id: Z3JhZmFuYQ==
  client-secret: Z3JhZmFuYS1zZWNyZXQ=
---
# Source: k8s-manus/templates/storage/persistent-volumes.yaml
# PostgreSQL Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  accessModes:
    - 
  storageClassName: 
  resources:
    requests:
      storage: 5Gi
---
# Source: k8s-manus/templates/storage/persistent-volumes.yaml
# MySQL Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  accessModes:
    - 
  storageClassName: 
  resources:
    requests:
      storage: 5Gi
---
# Source: k8s-manus/templates/storage/persistent-volumes.yaml
# Redis Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  accessModes:
    - 
  storageClassName: 
  resources:
    requests:
      storage: 2Gi
---
# Source: k8s-manus/templates/storage/persistent-volumes.yaml
# Grafana Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
spec:
  accessModes:
    - 
  storageClassName: 
  resources:
    requests:
      storage: 5Gi
---
# Source: k8s-manus/templates/storage/persistent-volumes.yaml
# Authentik Media Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: authentik-media-pvc
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: authentication
spec:
  accessModes:
    - 
  storageClassName: 
  resources:
    requests:
      storage: 5Gi
---
# Source: k8s-manus/templates/storage/persistent-volumes.yaml
# PgAdmin Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-pvc
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: pgadmin
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
spec:
  accessModes:
    - 
  storageClassName: 
  resources:
    requests:
      storage: 2Gi
---
# Source: k8s-manus/templates/storage/persistent-volumes.yaml
# Heimdall Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: heimdall-pvc
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: heimdall
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: dashboard
spec:
  accessModes:
    - 
  storageClassName: 
  resources:
    requests:
      storage: 1Gi
---
# Source: k8s-manus/templates/storage/persistent-volumes.yaml
# Homer Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: homer-pvc
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: homer
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: dashboard
spec:
  accessModes:
    - 
  storageClassName: 
  resources:
    requests:
      storage: 1Gi
---
# Source: k8s-manus/templates/applications/grafana.yaml
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/applications/grafana.yaml
# Grafana NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-nodeport
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: http
    nodePort: 30300
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/applications/pgadmin.yaml
# PgAdmin Service
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: pgadmin
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
spec:
  type: ClusterIP
  ports:
  - port: 5050
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: pgadmin
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/applications/pgadmin.yaml
# PgAdmin NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: pgadmin-nodeport
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: pgadmin
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
spec:
  type: NodePort
  ports:
  - port: 5050
    targetPort: http
    nodePort: 30505
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: pgadmin
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/authentication/authentik.yaml
# Authentik Service
apiVersion: v1
kind: Service
metadata:
  name: authentik
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: authentication
spec:
  type: ClusterIP
  ports:
  - port: 9000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: authentik-server
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/authentication/authentik.yaml
# Authentik NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: authentik-nodeport
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: authentication
spec:
  type: NodePort
  ports:
  - port: 9000
    targetPort: http
    nodePort: 30900
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: authentik-server
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/dashboards/heimdall.yaml
# Heimdall Service
apiVersion: v1
kind: Service
metadata:
  name: heimdall
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: heimdall
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: dashboard
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: heimdall
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/dashboards/heimdall.yaml
# Heimdall NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: heimdall-nodeport
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: heimdall
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: dashboard
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: http
    nodePort: 30808
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: heimdall
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/dashboards/homer.yaml
# Homer Service
apiVersion: v1
kind: Service
metadata:
  name: homer
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: homer
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: dashboard
spec:
  type: ClusterIP
  ports:
  - port: 8081
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: homer
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/dashboards/homer.yaml
# Homer NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: homer-nodeport
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: homer
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: dashboard
spec:
  type: NodePort
  ports:
  - port: 8081
    targetPort: http
    nodePort: 30801
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: homer
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/databases/mysql.yaml
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: mysql
    protocol: TCP
    name: mysql
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/databases/mysql.yaml
# MySQL NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-nodeport
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  type: NodePort
  ports:
  - port: 3306
    targetPort: mysql
    nodePort: 30306
    protocol: TCP
    name: mysql
  selector:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/databases/postgres.yaml
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: postgres
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/databases/postgres.yaml
# PostgreSQL NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-nodeport
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  type: NodePort
  ports:
  - port: 5432
    targetPort: postgres
    nodePort: 30432
    protocol: TCP
    name: postgres
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/databases/redis.yaml
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: redis
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/databases/redis.yaml
# Redis NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: redis-nodeport
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
spec:
  type: NodePort
  ports:
  - port: 6379
    targetPort: redis
    nodePort: 30379
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: k8s-manus-test
---
# Source: k8s-manus/templates/applications/grafana.yaml
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: application
    spec:
      containers:
      - name: grafana
        image: "grafana/grafana:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: admin-username
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: admin-password
        - name: GF_DATABASE_TYPE
          value: mysql
        - name: GF_DATABASE_HOST
          value: mysql:3306
        - name: GF_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-database
        - name: GF_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-username
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-password
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
        - name: GF_SERVER_DOMAIN
          value: "grafana.wazzan.us"
        - name: GF_SERVER_ROOT_URL
          value: "http://grafana.wazzan.us:3000"
        - name: GF_AUTH_GENERIC_OAUTH_ENABLED
          value: "true"
        - name: GF_AUTH_GENERIC_OAUTH_NAME
          value: "Authentik"
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: grafana-oauth-secrets
              key: client-id
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: grafana-oauth-secrets
              key: client-secret
        - name: GF_AUTH_GENERIC_OAUTH_SCOPES
          value: "openid profile email"
        - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
          value: "http://authentik.wazzan.us:9000/application/o/authorize/"
        - name: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
          value: "http://authentik.wazzan.us:9000/application/o/token/"
        - name: GF_AUTH_GENERIC_OAUTH_API_URL
          value: "http://authentik.wazzan.us:9000/application/o/userinfo/"
        - name: GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH
          value: "contains(groups[*], 'Grafana Admins') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          limits:
            cpu: 250m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
---
# Source: k8s-manus/templates/applications/pgadmin.yaml
# PgAdmin Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: pgadmin
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: application
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: pgadmin
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: pgadmin
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: application
    spec:
      containers:
      - name: pgadmin
        image: "dpage/pgadmin4:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: admin-email
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: admin-password
        - name: PGADMIN_CONFIG_SERVER_MODE
          value: "False"
        - name: PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED
          value: "False"
        - name: PGADMIN_LISTEN_PORT
          value: "80"
        volumeMounts:
        - name: pgadmin-storage
          mountPath: /var/lib/pgadmin
        resources:
          limits:
            cpu: 250m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /misc/ping
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /misc/ping
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: pgadmin-storage
        persistentVolumeClaim:
          claimName: pgadmin-pvc
---
# Source: k8s-manus/templates/authentication/authentik.yaml
# Authentik Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentik-server
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: authentik-server
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: authentication
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: authentik-server
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-server
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: authentication
    spec:
      containers:
      - name: authentik-server
        image: "ghcr.io/goauthentik/server:2024.12.1"
        imagePullPolicy: IfNotPresent
        command: ["dumb-init", "--", "ak", "server"]
        ports:
        - containerPort: 9000
          name: http
        env:
        - name: AUTHENTIK_REDIS__HOST
          value: redis
        - name: AUTHENTIK_REDIS__PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: redis-password
        - name: AUTHENTIK_POSTGRESQL__HOST
          value: postgres
        - name: AUTHENTIK_POSTGRESQL__USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-username
        - name: AUTHENTIK_POSTGRESQL__NAME
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-database
        - name: AUTHENTIK_POSTGRESQL__PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: AUTHENTIK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: authentik-secrets
              key: secret-key
        - name: AUTHENTIK_ERROR_REPORTING__ENABLED
          value: "false"
        - name: AUTHENTIK_DISABLE_UPDATE_CHECK
          value: "true"
        - name: AUTHENTIK_DISABLE_STARTUP_ANALYTICS
          value: "true"
        - name: AUTHENTIK_AVATARS
          value: "none"
        volumeMounts:
        - name: authentik-media
          mountPath: /media
        - name: authentik-templates
          mountPath: /templates
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /api/v3/admin/version/
            port: http
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/v3/admin/version/
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: authentik-media
        persistentVolumeClaim:
          claimName: authentik-media-pvc
      - name: authentik-templates
        emptyDir: {}
---
# Source: k8s-manus/templates/authentication/authentik.yaml
# Authentik Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentik-worker
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: authentik-worker
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: authentication
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: authentik-worker
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-worker
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: authentication
    spec:
      containers:
      - name: authentik-worker
        image: "ghcr.io/goauthentik/server:2024.12.1"
        imagePullPolicy: IfNotPresent
        command: ["dumb-init", "--", "ak", "worker"]
        env:
        - name: AUTHENTIK_REDIS__HOST
          value: redis
        - name: AUTHENTIK_REDIS__PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: redis-password
        - name: AUTHENTIK_POSTGRESQL__HOST
          value: postgres
        - name: AUTHENTIK_POSTGRESQL__USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-username
        - name: AUTHENTIK_POSTGRESQL__NAME
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-database
        - name: AUTHENTIK_POSTGRESQL__PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: AUTHENTIK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: authentik-secrets
              key: secret-key
        - name: AUTHENTIK_ERROR_REPORTING__ENABLED
          value: "false"
        - name: AUTHENTIK_DISABLE_UPDATE_CHECK
          value: "true"
        - name: AUTHENTIK_DISABLE_STARTUP_ANALYTICS
          value: "true"
        volumeMounts:
        - name: authentik-media
          mountPath: /media
        - name: authentik-templates
          mountPath: /templates
        resources:
          limits:
            cpu: 250m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
      volumes:
      - name: authentik-media
        persistentVolumeClaim:
          claimName: authentik-media-pvc
      - name: authentik-templates
        emptyDir: {}
---
# Source: k8s-manus/templates/dashboards/heimdall.yaml
# Heimdall Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: heimdall
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: heimdall
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: heimdall
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: heimdall
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: dashboard
    spec:
      containers:
      - name: heimdall
        image: "lscr.io/linuxserver/heimdall:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "UTC"
        volumeMounts:
        - name: heimdall-storage
          mountPath: /config
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: heimdall-storage
        persistentVolumeClaim:
          claimName: heimdall-pvc
---
# Source: k8s-manus/templates/dashboards/homer.yaml
# Homer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: homer
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: homer
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: dashboard
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: homer
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: homer
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: dashboard
    spec:
      containers:
      - name: homer
        image: "b4bz/homer:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: INIT_ASSETS
          value: "1"
        volumeMounts:
        - name: homer-storage
          mountPath: /www/assets
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: homer-storage
        persistentVolumeClaim:
          claimName: homer-pvc
---
# Source: k8s-manus/templates/databases/mysql.yaml
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: mysql
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: mysql
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mysql
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: mysql
        image: "mysql:8.0"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-database
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 250m
            memory: 512Mi
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
# Source: k8s-manus/templates/databases/postgres.yaml
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: postgres
        image: "postgres:15-alpine"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# Source: k8s-manus/templates/databases/redis.yaml
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: database
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: k8s-manus-test
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: k8s-manus-test
        app.kubernetes.io/component: database
    spec:
      containers:
      - name: redis
        image: "redis:7-alpine"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: redis-password
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
# Source: k8s-manus/templates/networking/ingress.yaml
# Main Ingress for all services
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: k8s-manus-ingress
  namespace: k8s-manus
  labels:
    app.kubernetes.io/name: k8s-manus
    app.kubernetes.io/instance: k8s-manus-test
    app.kubernetes.io/component: networking
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  ingressClassName: traefik
  rules:
  # Authentik SSO
  - host: "authentik.wazzan.us"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: authentik
            port:
              number: 9000
  
  # Grafana
  - host: "grafana.wazzan.us"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
  
  # PgAdmin
  - host: "pgadmin.wazzan.us"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: pgadmin
            port:
              number: 5050
  
  # Heimdall
  - host: "heimdall.wazzan.us"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: heimdall
            port:
              number: 8080
  
  # Homer
  - host: "homer.wazzan.us"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: homer
            port:
              number: 8081
