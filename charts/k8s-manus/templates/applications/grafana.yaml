{{- if .Values.grafana.enabled }}
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: application
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.grafana.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: application
    spec:
      containers:
      - name: grafana
        image: "{{ .Values.images.grafana.repository }}:{{ .Values.images.grafana.tag }}"
        imagePullPolicy: {{ .Values.images.grafana.pullPolicy }}
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: admin-username
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: admin-password
        - name: GF_DATABASE_TYPE
          value: mysql
        - name: GF_DATABASE_HOST
          value: mysql:3306
        - name: GF_DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-database
        - name: GF_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-username
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: mysql-password
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
        - name: GF_SERVER_DOMAIN
          value: "{{ .Values.grafana.subdomain }}.{{ .Values.global.domain }}"
        - name: GF_SERVER_ROOT_URL
          value: "http://{{ .Values.grafana.subdomain }}.{{ .Values.global.domain }}:{{ .Values.grafana.port }}"
        {{- if .Values.grafana.oauth.enabled }}
        - name: GF_AUTH_GENERIC_OAUTH_ENABLED
          value: "true"
        - name: GF_AUTH_GENERIC_OAUTH_NAME
          value: "Authentik"
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: grafana-oauth-secrets
              key: client-id
        - name: GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: grafana-oauth-secrets
              key: client-secret
        - name: GF_AUTH_GENERIC_OAUTH_SCOPES
          value: "openid profile email"
        - name: GF_AUTH_GENERIC_OAUTH_AUTH_URL
          value: "http://{{ .Values.authentik.subdomain }}.{{ .Values.global.domain }}:{{ .Values.authentik.port }}/application/o/authorize/"
        - name: GF_AUTH_GENERIC_OAUTH_TOKEN_URL
          value: "http://{{ .Values.authentik.subdomain }}.{{ .Values.global.domain }}:{{ .Values.authentik.port }}/application/o/token/"
        - name: GF_AUTH_GENERIC_OAUTH_API_URL
          value: "http://{{ .Values.authentik.subdomain }}.{{ .Values.global.domain }}:{{ .Values.authentik.port }}/application/o/userinfo/"
        - name: GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH
          value: "contains(groups[*], 'Grafana Admins') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'"
        {{- end }}
        {{- if .Values.grafana.plugins }}
        - name: GF_INSTALL_PLUGINS
          value: "{{ join "," .Values.grafana.plugins }}"
        {{- end }}
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          {{- toYaml .Values.grafana.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: application
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: {{ .Release.Name }}

{{- if .Values.networking.nodePort.enabled }}
---
# Grafana NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-nodeport
  namespace: {{ .Values.global.namespace }}
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: application
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: http
    nodePort: 30300
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- end }}
{{- end }}

